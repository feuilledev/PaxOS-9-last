; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
build_cache_dir = .pio/build_cache

[env]
test_framework = googletest
lib_ldf_mode = chain+
lib_deps =
	lovyan03/LovyanGFX@^1.2.7
	bitbank2/FT6236G@^1.0.0
	
build_flags =
	-std=gnu++2a
	-std=gnu17
	-lm
	-Iinclude
build_unflags =
	-std=gnu++11
	-std=gnu++14
	-std=gnu11
	-std=gnu14

[env:native]
platform = native
build_flags =
	${env.build_flags}
	-lSDL2main
	-lSDL2
    -lcurl

[env:paxo-v5]
platform = espressif32
board = paxo_v5_16mb
framework = espidf, arduino

board_build.esp-idf.sdkconfig_options.CONFIG_MAIN_TASK_STACK_SIZE = 12000
board_build.partitions = partition.csv
board_build.flash_size = 16MB
board_upload.maximum_size = 16388608
monitor_speed = 115200
board_build.f_flash = 80000000L
board_build.flash_mode = qio
lib_deps =
	${env.lib_deps}
	anto/backtrace-saver-esp32@1.1.0
	
build_flags =
	${env.build_flags}
	-DPLATFORM_PAXO_V5
	-DCONFIG_FATFS_MAX_LFN=255
	-fexceptions
	-Wno-error=maybe-uninitialized
	-Wno-reorder
	-DBOARD_HAS_PSRAM
	#-DCONFIG_SPIRAM_CACHE_WORKAROUND
	-DCONFIG_SPIRAM_USE_MALLOC
	-DCORE_DEBUG_LEVEL=5
	-DSOL_NO_THREAD_LOCAL=1
	-mtext-section-literals
	-Wl,--wrap=esp_panic_handler
	-DCONFIG_HEAP_POISONING_DISABLED=1
	-D CONFIG_HEAP_POISONING_DISABLED=1
	-Wno-error=class-memaccess

	#-DCONFIG_MBEDTLS_CERTIFICATE_BUNDLE=1
    #-DCONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_FULL=1
    #-DCONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN=8192
	#-DCONFIG_MBEDTLS_DYNAMIC_BUFFER_ALLOCATION_MODE=1
    #-DCONFIG_MBEDTLS_DYNAMIC_RX_BUFFER_SIZE=16384
    #-DCONFIG_MBEDTLS_DYNAMIC_TX_BUFFER_SIZE=16384
build_type = debug
monitor_filters = esp32_exception_decoder

[env:windows]
extends = env:native
test_testing_command = ${platformio.build_dir}/${this.__env__}/program
build_flags =
	${env:native.build_flags}
; FIXME: If someone know how to add a library dynamically from an extra script to the PlatformIO build system, please let me know.
	-Iextern/SDL2/x86_64-w64-mingw32/include
	-Lextern/SDL2/x86_64-w64-mingw32/lib
	-Iextern/curl/include
	-Lextern/curl/lib
	-m64
	-Wa,-mbig-obj
	-Wl,-allow-multiple-definition,--stack,16777216
	-Os
extra_scripts =
	pre:scripts/platformio/windows/setup.py
	scripts/platformio/windows/execute.py

[env:windows-build-only]
extends = env:native
build_flags =
	${env:native.build_flags}
	-Iextern/SDL2-2.28.5/x86_64-w64-mingw32/include/SDL2
	-Lextern/SDL2-2.28.5/x86_64-w64-mingw32/lib
	-m64
	-Wa,-mbig-obj
	-Wl,-allow-multiple-definition,--stack,16777216
	-Os
extra_scripts =
	pre:scripts/platformio/windows/setup.py

[env:linux]
extends = env:native
build_flags =
	${env:native.build_flags}
	-g
	-ggdb
	-lncurses
    -lcurl

[env:macos]
extends = env:native
build_flags =
	${env:native.build_flags}
	-I/usr/local/include/SDL2
	-L/usr/local/lib
	-I/opt/homebrew/include/SDL2
	-L/opt/homebrew/lib

[env:test]
extends = env:native
lib_ignore = graphics
